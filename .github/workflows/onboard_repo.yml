name: ‚õµ Onboard repo
on:
  issues:
    types:
      - opened
      - edited

permissions:
  issues: write
  id-token: write
  contents: write

jobs:
  parse-issue:
    if: contains(github.event.issue.labels.*.name, 'Onboarding')
    runs-on: ubuntu-latest
    outputs:
      repoUrl: ${{ fromJson(steps.parse.outputs.parsed-issue).repo-url }}
      solutionAreas:
        ${{ toJson(fromJson(steps.parse.outputs.parsed-issue).solution-areas) }}
    steps:
      - uses: actions/checkout@v4
      - name: Issue form parser
        id: parse
        uses: edumserrano/github-issue-forms-parser@v1.3.7
        with:
          template-filepath: ".github/ISSUE_TEMPLATE/onboard_repo.yml"
          issue-form-body: "${{ github.event.issue.body }}"

      - name: Show parsed payload data
        run: |
          # Using the character `'` to prevent all characters enclosed within
          # them from being treated as special characters (e.g. $ or `)
          echo '${{ steps.parse.outputs.parsed-issue }}'

      - name: Comment with inputs
        if: github.event.action == 'opened' || github.event.action == 'edited'
        uses: peter-evans/create-or-update-comment@v3.0.2
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            **Starting the onboarding of the repository following parameters:**
            Repo URL: ${{ fromJson(steps.parse.outputs.parsed-issue).repo-url }}
            Solution areas: 
            * Infrastructure: ${{ fromJson(steps.parse.outputs.parsed-issue).solution-areas.infrastructure && '‚úÖ' || '‚õî' }}
            * Application Innovation: ${{ fromJson(steps.parse.outputs.parsed-issue).solution-areas.application-innovation && '‚úÖ' || '‚õî' }}
            * Data & AI: ${{ fromJson(steps.parse.outputs.parsed-issue).solution-areas.data-ai && '‚úÖ' || '‚õî' }}
            * Security: ${{ fromJson(steps.parse.outputs.parsed-issue).solution-areas.security && '‚úÖ' || '‚õî' }}
            * Modern Workplace: ${{ fromJson(steps.parse.outputs.parsed-issue).solution-areas.modern-workplace && '‚úÖ' || '‚õî' }}
            * Dynamics 365: ${{ fromJson(steps.parse.outputs.parsed-issue).solution-areas.dynamics-365 && '‚úÖ' || '‚õî' }}
            * Other: ${{ fromJson(steps.parse.outputs.parsed-issue).solution-areas.other && '‚úÖ' || '‚õî' }}

            **Next steps:**
            ‚è≠Ô∏è The repository is being added to the Belux Engineering Experience community. You will be notified when the process is finished.

  add-repo-to-community:
    if: contains(github.event.issue.labels.*.name, 'Onboarding')
    needs: parse-issue
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: actions4git/setup-git@v1
        name: Setup git
      - name: Add repository to community
        run: |
          import csv

          repo_url = "${{ needs.parse-issue.outputs.repoUrl }}"
          solution_areas = {
            "infrastructure": "${{ fromJson(needs.parse-issue.outputs.solutionAreas).infrastructure }}",
            "application-innovation": "${{ fromJson(needs.parse-issue.outputs.solutionAreas).application-innovation }}",
            "security": "${{ fromJson(needs.parse-issue.outputs.solutionAreas).security }}",
            "data-ai": "${{ fromJson(needs.parse-issue.outputs.solutionAreas).data-ai }}",
            "modern-workplace": "${{ fromJson(needs.parse-issue.outputs.solutionAreas).modern-workplace }}",
            "dynamics-365": "${{ fromJson(needs.parse-issue.outputs.solutionAreas).dynamics-365 }}",
            "other": "${{ fromJson(needs.parse-issue.outputs.solutionAreas).other }}"
          }

          file_path = "repo-urls.csv"
          updated = False
          rows = []

          # Read the CSV file and update if the repo URL exists
          with open(file_path, mode="r", newline="", encoding="utf-8") as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
              if row["repo-url"] == repo_url:
                row.update(solution_areas)
                updated = True
              rows.append(row)

          # If the repo URL was not found, add it as a new row
          if not updated:
            new_row = {"repo-url": repo_url, **solution_areas}
            rows.append(new_row)

          # Write the updated data back to the CSV file
          with open(file_path, mode="w", newline="", encoding="utf-8") as csvfile:
            fieldnames = ["repo-url", "infrastructure", "application-innovation", "security", "data-ai", "modern-workplace", "dynamics-365", "other"]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(rows)

        shell: python

      - name: Add repo to community
        run: |
          git add repo-urls.csv
          git commit -m "Add repository ${{ needs.parse-issue.outputs.repoUrl }} to the community"
          git push origin main
          echo "Repository added successfully!"

      - name: Comment with success message
        uses: peter-evans/create-or-update-comment@v3.0.2
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            **Onboarding process completed!**
            The repository has been successfully added to the Belux Engineering Experience community. Thank you for your contribution! üéâ
